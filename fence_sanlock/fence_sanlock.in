#!/bin/bash

# Copyright 2012 Red Hat, Inc.
#
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions
# of the GNU General Public License v2 or (at your option) any later version.

# cluster.conf
#
# <clusternode name="n1" nodeid="1">
#   <fence>
#   <method name="1">
#   <device name="wd" host_id="1"/>
#   </method>
#   </fence>
#   <unfence>
#   <device name="wd" host_id="1" action="on"/>
#   </unfence>
# </clusternode>
#
# <clusternode name="n2" nodeid="2">
#   <fence>
#   <method name="1">
#   <device name="wd" host_id="2"/>
#   </method>
#   </fence>
#   <unfence>
#   <device name="wd" host_id="2" action="on"/>
#   </unfence>
# </clusternode>
#
# <fencedevice name="wd" agent="fence_sanlock" device="/dev/fence_sanlock/leases"/>

# setup (one time only):
# fence_sanlock sanlock_init $device
#
# startup:
# service wdmd start
# service sanlock start
# service cman start
# - fence_node -U -> fence_sanlock -o on -> fence_sanlockd

max_hosts=128
opts=
node=
action=
device=
host_id=
offset=

help() {
	echo "Usage:"
	echo ""
	echo "fence_sanlock [options]"
	echo ""
	echo "Options:"
	echo "  -n <node>     Name of node to operate on"
	echo "  -o <action>   Action: off (default), on, or status"
	echo "                (sanlock specific actions: sanlock_init)"
	echo "  -d <path>     sanlock shared storage for leases"
	echo "  -i <num>      sanlock host_id of node to operate on"
	echo "  -h            Print this help, then exit"
	echo "  -V            Print program version information, then exit"
	echo ""
	echo "stdin options:"
	echo "  action=<action>"
	echo "  device=<path>"
	echo "  host_id=<num>"
}

cli_options() {
	while [ "$1" != "--" ]; do
		case $1 in
		-n)
			node=$2
			shift
		;;
		-o)
			action=$2
			shift
		;;
		-d)
			device=$2
			shift
		;;
		-i)
			host_id=$2
			shift
		;;
		-h)
			help
			exit 0
		;;
		-V)
			echo "fence_sanlock version @VERSION@"
			exit 0
		;;
		esac
		shift
	done
}

stdin_options() {
	oldIFS="$IFS"
	export IFS="="
	while read key val; do
		case "$key" in
			action)
				action=$val
			;;
			device)
				device=$val
			;;
			host_id)
				host_id=$val
			;;
		esac
	done
	export IFS="$oldIFS"
}

if [ $# -eq 0 ]; then
	stdin_options
else
	opts=$(getopt n:o:d:i:hV $@)
	if [ "$?" != 0 ]; then
		help
		exit 1
	fi
	cli_options $opts
fi

# FIXME: add metadata
metadata() {
	return 0
}

verify_device() {
	# verify device has been initialized

	leader=$(sanlock direct read_leader -r fence:h$host_id:$device:$offset 2>&1)
	[ "$?" != 0 ] && {
		echo "Unable to read $device information"
		return 1
	}
	magic="$(echo "$leader" | grep magic | awk '{print $NF}')"
	[ -z "$magic" ] && {
		echo "Unable to determine $device sanlock magic"
		return 1
	}
	[ "$magic" != "0x6152010" ] && {
		echo "Error: $device magic does not match sanlock magic"
		return 1
	}
	return 0
}

action_on() {
	verify_device || return 1

	pid="$(pidof fence_sanlockd)"
	[ -n "$pid" ] && {
		kill $pid
		sleep 2
	}

	daemonerr="$(fence_sanlockd -d $device -i $host_id 2>&1)"
	[ "$?" != 0 ] && {
		echo "Unable to execute fence_sanlockd. Error:"
		echo "$daemonerr"
		return 1
	}

	# wait for fence_sanlockd to acquire the local lease;
	# it can take minutes, and we can't allow fence_tool join
	# until this is complete

	while ! sanlock client status | grep -q fence:h$host_id:$device:$offset; do 
		# FIXME: check that r is really done being acquired?
		# just appearing in output may not be enough

		sleep 1
	done

	exit 0
}

action_off() {
	verify_device || return 1

	owner_id="$(echo "$leader" | grep owner_id | awk '{print $NF}')"
	owner_gen="$(echo "$leader" | grep owner_gen | awk '{print $NF}')"
	ver="$(echo "$leader" | grep lver | awk '{print $NF}')"

	# owner_id should equal host_id
	[ "$owner_id" != "$host_id" ] && {
		echo "Error: owner_id $owner_id does not match host_id $host_id"
		return 1
	}

	sanlock client request -r fence:h$host_id:$device:$offset:$((ver + 1)) -f 2 > /dev/null 2>&1
	[ "$?" != 0 ] && {
		echo "Unable to send sanlock client request"
		return 1
	}

	pid="$(pidof fence_sanlockd)"
	[ -z "$pid" ] && {
		echo "Unable to determine fence_sanlockd pin"
		return 1
	}

	# FIXME: should this loop have a retry limit?
	while :
	do
		sanlock client acquire -r fence:h$host_id:$device:$offset -p $pid
		[ "$?" = 0 ] && {
			# fence success
			sanlock client release -r fence:h$host_id:$device:$offset -p $pid
			[ "$?" != 0 ] && {
				# FIXME: what should we do here?
				echo "Unable to release lock?"
				#return 1
			}
			break;
		}

		sleep 5

		# FIXME: there probably some errors here where we should just fail

		# FIXME: we should probably reread the leader, and if it's been
		# reacquired cleanly by the host, I think we can quit with success
	done

	return 0
}

action_status() {
	verify_device || return 1

	timestamp="$(echo "$leader" | grep timestamp | awk '{print $NF}')"

	[ -z "$timestamp" ] && {
		echo "Unable to determine timestamp"
		exit 1
	}

	# lease is released, so host is "off"
	[ "$timestamp" = 0 ] && {
		echo "Status: OFF"
		exit 2
	}

	# lease is held, so host is "on"
	echo "Status: ON"
	exit 0
}

sanlock_init() {
	# initialize lease device
	echo -n "Initializing lease device $device: "
	sanlock direct init -s fence:0:$device:0 \
		> /dev/null 2>/dev/null || \
		{ echo "error $?" && return 1; }
	echo "ok"

	echo -n "Initializing host leases: "
	for host_id in $(seq 1 $max_hosts); do
		offset=$((host_id * 1048576))
		sanlock direct init -r fence:h$host_id:$device:$offset \
			> /dev/null 2>/dev/null || \
			{ echo "error $? for host $host_id" && return 1; }
	done
	echo "ok"

	return 0
}

[ -z "$action" ] && action=off

# check actions and options compatibility
# all actions beside metadata needs device
[ "$action" != "metadata" ] && {
	[ -z "$device" ] && {
		echo "device argument required"
		exit 1
	}
	# all actions beside sanlock_init needs host_id
	[ "$action" != "sanlock_init" ] && [ -z "$host_id" ] && {
		echo "host_id argument required"
		exit 1
	}
}

# verify host_id parameter
[ -n "$host_id" ] && {
	if [ "$host_id" -lt 1 ] || [ "$host_id" -gt "$max_hosts" ]; then
		echo "host_id must be between 1 and $max_hosts"
		exit 1
	fi
	offset=$((host_id * 1048576))
}

case "$action" in
	metadata)
		metadata
	;;
	sanlock_init)
		sanlock_init
	;;
	on)
		action_on
	;;
	off)
		action_off
	;;
	status)
		action_status
	;;
	*)
		echo $"Unknown action: $action"
		exit 1
	;;
esac
exit $?
