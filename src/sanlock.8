.TH SANLOCK 8 2011-08-02

.SH NAME
sanlock \- shared storage lock manager

.SH SYNOPSIS
.B sanlock
[COMMAND] [ACTION] ...

.SH DESCRIPTION

The sanlock daemon manages leases for applications running on a cluster of
hosts with shared storage.  All lease management and coordination is done
through reading and writing blocks on the shared storage.  Two types of
leases are used, each based on a different algorithm:

"delta leases" are slow to acquire and demand regular i/o to shared
storage.  A delta lease exists in a single sector of shared storage.
Acquiring a delta lease involves reads and writes to that sector separated
by specific delays.  Once acquired, the lease must be renewed by writing a
new timestamp to the sector regularly.  sanlock only uses delta leases
internally to hold a lease on its host_id.  The host_id leases prevent two
hosts from using the same host_id and provide basic host liveness
information based on the renewals.

"paxos leases" are generally fast to acquire and sanlock makes them
available to applications as general purpose resource leases.  A paxos
lease exists in 1MB of shared storage (8MB for 4k sectors).  Acquiring a
paxos lease involves reads and writes to max_hosts (2000) sectors in a
specific sequence specified by the Disk Paxos algorithm.  paxos leases use
host_id's internally to indicate the owner of the lease, and the algorithm
will not work if different hosts use the same host_id.  So, the delta
leases provide the unique host_id's used in paxos leases.  paxos leases
also use delta leases to check if a host_id is alive.

Before sanlock can be used, the user must assign each host a host_id,
which is a number between 1 and 2000.  Two hosts should not be given the
same host_id.

sanlock views a pool of storage as a "lockspace".  Each distinct pool of
storage, e.g. from different sources, would typically be defined as a
separate lockspace, with a unique lockspace name.

Part of this storage space must be reserved and initialized for sanlock to
store delta leases.  Each host that wants to use the lockspace must first
acquire a delta lease on its host_id number within the lockspace.  (See
the add_lockspace action/api.)  The space required for 2000 delta leases
in the lockspace (for all possible hosts, max_hosts, which is 2000) is 1MB
(8MB for 4k sectors).  (This is the same size as that required for a
single paxos lease.)

The following example illustrates these ideas.

1. Create storage pools and reserve and initialize host_id leases
.br
two different LUNs on a SAN: /dev/sdb, /dev/sdc
.br
vgcreate pool1 /dev/sdb
.br
vgcreate pool2 /dev/sdc
.br
lvcreate -n hostid_leases -L 1MB pool1
.br
lvcreate -n hostid_leases -L 1MB pool2
.br
sanlock direct init -s lockspace1:0:/dev/pool1/hostid_leases:0
.br
sanlock direct init -s lockspace2:0:/dev/pool2/hostid_leases:0
.br

2. Start the sanlock daemon on each host
.br
sanlock daemon
.br

3. Add each lockspace to be used
.br
host1:
.br
sanlock client add_lockspace -s lockspace1:1:/dev/pool1/hostid_leases:0
.br
sanlock client add_lockspace -s lockspace2:1:/dev/pool2/hostid_leases:0
.br
host2:
.br
sanlock client add_lockspace -s lockspace1:2:/dev/pool1/hostid_leases:0
.br
sanlock client add_lockspace -s lockspace2:2:/dev/pool2/hostid_leases:0
.br

4. Applications can now reserve/initialize space for resource leases, and
then acquire the leases as they need to access the resources.

The resource leases that are created and how they are used depends on the
application.  For example, say application A, running on multiple hosts,
needs to synchronize access to data it stores on /dev/pool1/Adata.  A
could use a resource lease as follows:

5. Reserve and initialize a single resource lease for Adata
.br
lvcreate -n Adata_lease -L 1MB pool1
.br
sanlock direct init -r lockspace1:Adata:/dev/pool1/Adata_lease:0
.br

6. Acquire the lease from the app using libsanlock (see sanlock_register,
sanlock_acquire).  If the app is already running as pid 1234, and has
registered with the sanlock daemon, the lease can be added for it
manually.
.br
sanlock client acquire
        -p 1234 -r lockspace1:Adata:/dev/pool1/Adata_lease:0
.br

.B offsets

offsets must be 1MB aligned for disks with 512 byte sectors, and
8MB aligned for disks with 4096 byte sectors.

offsets may be used to place leases on the same device rather than using
separate devices and offset 0 as shown in examples above, e.g. these
commands above:
.br
sanlock direct init -s lockspace1:0:/dev/pool1/hostid_leases:0
.br
sanlock direct init -r lockspace1:Adata:/dev/pool1/Adata_lease:0
.br
could be replaced by:
.br
.br
sanlock direct init -s lockspace1:0:/dev/pool1/leases:0
.br
sanlock direct init -r lockspace1:Adata:/dev/pool1/leases:1048576

.B failures

If a process holding resource leases fails or exits without releasing its
leases, sanlock will release the leases for it automatically.

If the sanlock daemon cannot renew a lockspace host_id for a specific
period of time (usually because storage access is lost), sanlock will kill
any process holding a resource lease within the lockspace.

If the sanlock daemon crashes or gets stuck, it will no longer renew the
expiry time of the host_id's in the wdmd daemon, and the watchdog device
will reset the host.

.B watchdog

The watchdog device is used to further protect shared resources in case
processes cannot be killed when a host_id fails to be renewed.  The
watchdog device will reset the host withing a known fixed time period from
the last successful host_id renewal.  This known time is the length of
time that sanlock on another host must wait before granting the resource
lease that was held by a process on the failed host.

The sanlock daemon uses the wdmd daemon to multiplex petting the watchdog
device for all host_id's that are held and being renewed.  The watchdog is
managed so it will reset the host if any host_id fails to be renewed for
fixed period of time.

.B levels of protection

sanlock leases are meant to guarantee that two process on two hosts are
never allowed to hold the same resource lease at once.  If they were, the
resource being protected could be corrupted.  There are three levels of
protection built into sanlock itself:

1. The paxos leases and delta leases themselves.

2. If the leases cannot function because storage access is lost (host_id's
cannot be renewed), the sanlock daemon kills any pids using resource
leases in the lockspace.

3. If the pids do not exit after being killed, or if the sanlock daemon
fails, the watchdog device resets the host.


.SH OPTIONS

.P
COMMAND can be one of three primary top level choices
.P
.BR "sanlock daemon" " start daemon"
.br
.BR "sanlock client" " send request to daemon (default command if none given)"
.br
.BR "sanlock direct" " access storage directly (no coordination with daemon)"

.BR "sanlock daemon" " [options]"

.BR -D "    "
no fork and print all logging to stderr

.BI -Q " num"
quiet error messages for common lock contention

.BI -R " num"
renewal debugging, log debug info for each renewal

.BI -L " num"
write logging at level and up to logfile (-1 none)

.BI -S " num"
write logging at level and up to syslog (-1 none)

.BI -U " num"
uid

.BI -G " num"
gid

.BI -t " num"
max worker threads

.BI -w " num"
use watchdog through wdmd (1 yes, 0 no, default 1)

.BI -h " num"
use high priority features (1 yes, 0 no, default 1)

.BI \-a " num"
use async i/o (1 yes, 0 no, default 1)

.BI -o " num"
io timeout in seconds (default 10)

.B "sanlock client"
.I action
[options]

.B sanlock client status

Print processes, lockspaces, and resources being manged by the sanlock
daemon.

.B sanlock client log_dump

Print the sanlock daemon internal debug log.

.B sanlock client shutdown

Tell the sanlock daemon to exit.  Any registered processes will be killed,
their resource leases released, and lockspaces removed.

.BR "sanlock client add_lockspace -s" " LOCKSPACE"

Tell the sanlock daemon to acquire the specified host_id in the lockspace.
This will allow resources to be acquired in the lockspace.

.BR "sanlock client rem_lockspace -s" " LOCKSPACE"

Tell the sanlock daemon to release the specified host_id in the lockspace.
Any processes holding resource leases in this lockspace will be killed,
and the leases released.

.BR "sanlock client command -r" " RESOURCE " \
\fB-c\fP " " \fIpath\fP " " \fIargs\fP

Register with the sanlock daemon, acquire the specified resource lease,
and exec the command at path with args.  When the command exits, the
sanlock daemon will release the lease.  -c must be the final option.

.BR "sanlock client acquire -r" " RESOURCE " \
\fB-p\fP " " \fIpid\fP
.br
.BR "sanlock client release -r" " RESOURCE " \
\fB-p\fP " " \fIpid\fP

Tell the sanlock daemon to acquire or release the specified resource lease
for the given pid.  The pid must be registered with the sanlock daemon.
acquire can optionally take a versioned RESOURCE string RESOURCE:lver,
where lver is the version of the lease that must be acquired, or fail.

.BI "sanlock client inquire -p" " pid"

Print the resource leases held the given pid.  The format is a versioned
RESOURCE string "RESOURCE:lver" where lver is the version of the lease
held.

.B "sanlock direct"
.I action
[options]

.BI \-a " num"
use async i/o (1 yes, 0 no, default 1)

.BI -o " num"
io timeout in seconds (default 10)

.BR "sanlock direct init -s" " LOCKSPACE"
.br
.BR "sanlock direct init -r" " RESOURCE"

Initialize storage for 2000 host_id (delta) leases for the given
lockspace, or initialize storage for one resource (paxos) lease.  Both
options require 1MB of space.  The host_id in the LOCKSPACE string is not
relevant to initialization, so the value is ignored.  (The default of 2000
host_ids can be changed for special cases using the -n num_hosts and -m
max_hosts options.)

.BR "sanlock direct read_leader -s" " LOCKSPACE"
.br
.BR "sanlock direct read_leader -r" " RESOURCE"

Read a leader record from disk and print the fields.  The leader record is
the single sector of a delta lease, or the first sector of a paxos lease.

.BR "sanlock direct read_id -s" " LOCKSPACE"
.br
.BR "sanlock direct live_id -s" " LOCKSPACE"

read_id reads a host_id and prints the owner.  live_id reads a host_id
once a second until it the timestamp or owner change (prints live 1), or
until host_dead_seconds (prints live 0).  (host_dead_seconds is derived
from the io_timeout option.  The live 0|1 conclusion will not match the
sanlock daemon's conclusion unless the configured timeouts match.)
./" .P
./" .BR "sanlock direct acquire_id -s" " LOCKSPACE"
./" .br
./" .BR "sanlock direct renew_id -s" " LOCKSPACE"
./" .br
./" .BR "sanlock direct release_id -s" " LOCKSPACE"
./"
./" Acquire, renew, or release a host_id directly to disk, independent from
./" the sanlock daemon.  Not for general use.  This should only be used for
./" testing or for manual recovery in an emergency.
./"
./" .P
./" .BR "sanlock direct acquire -r" " RESOURCE " \
./" \fB-i\fP " " \fInum\fP " " \fB-g\fP " " \fInum\fP
./" .br
./" .BR "sanlock direct release -r" " RESOURCE " \
./" \fB-i\fP " " \fInum\fP " " \fB-g\fP " " \fInum\fP
./"
./" Not supported.  Not for general use.
./"

.BI "sanlock direct dump" " path" \
\fR[\fP\fB:\fP\fIoffset\fP\fR]\fP

Read disk sectors and print leader records for delta or paxos leases.


.SS
LOCKSPACE option string

.BR \-s " " \fIlockspace_name\fP:\fIhost_id\fP:\fIpath\fP:\fIoffset\fP
.P
.IR lockspace_name " name of the lockspace"
.br
.IR host_id " local host identifier in lockspace"
.br
.IR path " path to storage reserved for leases"
.br
.IR offset " offset on path (bytes)"
.br

.SS
RESOURCE option string

.BR \-r " " \fIlockspace_name\fP:\fIresource_name\fP:\fIpath\fP:\fIoffset\fP
.P
.IR lockspace_name " name of lockspace"
.br
.IR resource_name " name of resource"
.br
.IR path " path to storage reserved for leases"
.br
.IR offset " offset on path (bytes)"
.br
.IR lver " optional leader version"

.SH SEE ALSO
.BR wdmd (8)

